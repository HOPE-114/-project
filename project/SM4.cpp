#include <immintrin.h>
#include <cstdint>
#include <cstring>
#include <iostream>

// S-box定义（标准SM4 S-box）
const uint8_t Sbox[256] = {
    0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
    0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
    0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
    0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
    0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
    0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
    0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
    0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
    0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
    0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
    0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
    0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
    0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x07,0x3e,0x3e,0x58,0x29,0x2d,0x28,0x20,
    0x66,0x35,0x59,0x1e,0x21,0x4c,0x59,0xa4,0x9f,0xe8,0xfa,0x0b,0xa0,0x6b,0x74,0x4d,
    0xba,0xe9,0x67,0x93,0xd9,0xf0,0x9a,0x97,0x55,0x5b,0x23,0x40,0x47,0x61,0xb8,0xd8,
    0x4b,0x70,0x39,0x61,0x1f,0x44,0xf1,0x86,0x87,0x0e,0x13,0xf6,0x65,0x60,0x4f,0x0e
};

// 预计算T-Table
const uint32_t T0[256] = {/* 256个uint32_t预计算值 */ };
const uint32_t T1[256] = {/* 256个uint32_t预计算值 */ };
const uint32_t T2[256] = {/* 256个uint32_t预计算值 */ };
const uint32_t T3[256] = {/* 256个uint32_t预计算值 */ };

// 简单密钥扩展
void keyExpansion(const uint8_t MK[16], uint32_t rk[32]) {
    // 根据标准SM4密钥扩展实现
}

/*
 * 纯软件SM4加密（基于T-Table）
 */
void SM4Encrypt_TTable(const uint8_t plaintext[16], uint8_t ciphertext[16], const uint32_t rk[32]) {
    uint32_t X[4];
    // 载入明文块
    for (int i = 0; i < 4; ++i) {
        X[i] = (plaintext[i * 4] << 24) | (plaintext[i * 4 + 1] << 16) | (plaintext[i * 4 + 2] << 8) | plaintext[i * 4 + 3];
    }
    // 轮加密
    for (int i = 0; i < 32; ++i) {
        uint32_t tmp = T0[(X[1] >> 24) & 0xFF] ^ T1[(X[2] >> 16) & 0xFF] ^ T2[(X[3] >> 8) & 0xFF] ^ T3[X[0] & 0xFF] ^ rk[i];
        // 移位
        X[0] = X[1]; X[1] = X[2]; X[2] = X[3]; X[3] = tmp;
    }
    // 倒序输出
    for (int i = 0; i < 4; ++i) {
        ciphertext[i * 4] = X[3 - i] >> 24;
        ciphertext[i * 4 + 1] = (X[3 - i] >> 16) & 0xFF;
        ciphertext[i * 4 + 2] = (X[3 - i] >> 8) & 0xFF;
        ciphertext[i * 4 + 3] = X[3 - i] & 0xFF;
    }
}

/*
 * 利用 AES-NI 轮函数加速 */
__m128i aesni_round(__m128i state, __m128i round_key) {
    return _mm_aesenc_si128(state, round_key);
}

// 其他高级优化
void speedup_using_aesni_example() {
    // 加载明文，密钥，调用AES-NI指令
    __m128i data = _mm_setzero_si128(); // 换成实际数据
    __m128i key = _mm_setzero_si128(); // 实际密钥
    __m128i enc = aesni_round(data, key);
}

int main() {
    uint8_t key[16] = {/* 16字节密钥 */ };
    uint8_t plaintext[16] = {/* 明文块 */ };
    uint8_t ciphertext[16];

    uint32_t rk[32];
    keyExpansion(key, rk);

    // 方法1：纯软件
    SM4Encrypt_TTable(plaintext, ciphertext, rk);

    std::cout << "Ciphertext (T-Table): ";
    for (int i = 0; i < 16; ++i) printf("%02X", ciphertext[i]);
    std::cout << std::endl;

    // 方法2：调用AES-NI（需硬件支持）
    speedup_using_aesni_example();

    return 0;
}