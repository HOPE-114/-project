
# SM3哈希算法实现与优化对比

## 算法概述
SM3 是中国国家密码管理局发布的密码杂凑算法标准，输出长度为 256 位。本项目实现了标准 SM3 算法和一个优化版本，通过对消息填充、扩展及迭代压缩等流程的不同处理，开展效率对比测试，助力理解算法原理与优化思路。

## 核心实现

### 1. 常量定义
```cpp
const uint32_t IV[8] = {
    0x7380166F, 0x4914B2B9, 0x172442D7, 0xDA8A0600,
    0xA96F30BC, 0x163138AA, 0xE38DEE4D, 0xB0FB0E4E
};  // 初始向量，作为哈希计算初始状态 
const uint32_t T[64] = {
    0x79CC4519, 0x79CC4519, ..., 0x7A879D8A, 0x7A879D8A
};  // 常数表，压缩函数迭代时依据轮次选取值 
```
`IV` 为算法规定的初始哈希值，`T` 用于压缩函数的轮运算，保障哈希计算遵循标准流程。

### 2. 辅助函数
- **循环左移（`ROTL32`）**：
```cpp
uint32_t ROTL32(uint32_t x, int n) {
    n &= 31;
    return (x << n) | (x >> (32 - n));
}
```
对 32 位无符号整数 `x` 执行 `n` 位循环左移，为后续置换、压缩操作提供基础移位能力。

- **置换函数（`P0`、`P1`）**：
```cpp
uint32_t P0(uint32_t x) {
    return x ^ ROTL32(x, 9) ^ ROTL32(x, 17);
}
uint32_t P1(uint32_t x) {
    return x ^ ROTL32(x, 15) ^ ROTL32(x, 23);
}
```
借助循环左移与异或操作实现数据置换，增强哈希结果的混淆度，是 SM3 算法关键变换环节。

- **逻辑函数（`FF`、`GG`）**：
```cpp
uint32_t FF(uint32_t x, uint32_t y, uint32_t z, int j) {
    if (j < 16) return x ^ y ^ z;
    else return (x & y) | (x & z) | (y & z);
}
uint32_t GG(uint32_t x, uint32_t y, uint32_t z, int j) {
    if (j < 16) return x ^ y ^ z;
    else return (x & y) | ((~x) & z);
}
```
依据迭代轮次 `j` 切换逻辑运算。前 16 轮用简单异或，后续轮次采用更复杂逻辑，提升哈希安全性，是压缩函数核心逻辑判断。

### 3. 标准 SM3 实现（`sm3_standard`）
- **消息填充**：先附加 `0x80` 标记，再填充 `0x00` 使消息长度满足 `448 mod 512`，最后以大端序添加原始消息长度，确保消息格式合规。
- **消息扩展**：从原始消息分组推导，生成 68 个扩展字 `W` 和 64 个扩展字 `W1`，为压缩函数准备扩展数据。
- **迭代压缩**：经 64 轮循环，利用辅助函数与扩展数据更新 8 个状态寄存器（`A - H`），逐步压缩消息分组，得到哈希中间值。
- **结果输出**：将最终状态寄存器值转换为 256 位（32 字节）大端序哈希值输出。

### 4. 优化版 SM3 实现（`sm3_optimized`）
在标准实现框架下优化：
- **消息扩展优化**：通过局部变量缓存常用值，减少数组重复访问，提升数据读取效率。 
- **迭代压缩优化**：以宏定义合并 4 轮压缩操作，削减循环与状态置换开销，借助编译器特性加快指令执行，在保证算法逻辑正确的前提下提升运算速度。

## 效率测试（`benchmark`）
- **测试数据**：构建 1MB（1024KB）、填充为 `0xAA` 的测试数据，模拟实际哈希运算场景。
- **测试逻辑**：分别统计标准实现与优化实现处理测试数据的耗时，依据公式 `吞吐量 = 数据量(MB) / 耗时(s)` 计算吞吐量，通过 `优化倍数 = 优化版吞吐量 / 标准版吞吐量` 对比优化效果，直观呈现优化前后效率差异。

![image](/project4/结果.png)

## 使用说明
1. **环境依赖**：需支持 C++11 及以上标准的编译器（如 GCC、Clang、Visual Studio 等），依赖 `<iostream>`、`<vector>`、`<cstdint>`、`<chrono>`、`<iomanip>` 等标准库头文件 。
2. **编译运行**：
    - **命令行编译（以 GCC 为例）**：执行 `g++ -std=c++11 sm3.cpp -o sm3` 编译生成可执行文件，运行 `./sm3` 启动测试。
    - **IDE 编译**：在 Visual Studio、CLion 等 IDE 中，创建项目并添加代码文件，编译运行后，于控制台查看效率对比结果 。 

通过本项目，可深入学习 SM3 算法实现流程，对比优化前后执行效率，为密码算法性能优化研究提供实践参考 。 
